{"version":3,"file":"formAjax.min.js","sources":["../src/formAjax.js"],"sourcesContent":["define(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui', 'core/templates', 'core/notification'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y, Templates, Notification) {\n          var formAjax = function(args) {\n                this.contextid = args.contextid || 1;\n                this.args = args;\n                var self=this;\n                self.init(args);\n          };\n\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        formAjax.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        formAjax.prototype.contextid = -1;\n\n           /**\n     * Initialise the class.\n     *\n     * @param {String} selector used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    formAjax.prototype.init = function(args) {\n \n\n      var self = this;\n\n       var self = this;\n       if (args.id) {\n            var head =  Str.get_string('editclass', 'local_manager',args);\n        } else {\n           var head = Str.get_string('addclass', 'local_manager');\n        }\n        return head.then(function(title) {\n            // Create the modal.\n            return ModalFactory.create({\n                type: ModalFactory.types.DEFAULT,\n                title: title,\n                body: this.getBody(),\n                footer: this.getFooter(),\n            });\n        }.bind(this)).then(function(modal) {\n            // Keep a reference to the modal.\n            this.modal = modal;\n\n            // Forms are big, we want a big modal.\n            this.modal.setLarge();\n\n            // We want to reset the form every time it is opened.\n            this.modal.getRoot().on(ModalEvents.hidden, function() {\n                 setTimeout(function(){\n                    modal.destroy();\n                }, 1000);\n                this.modal.setBody('');\n            }.bind(this));\n\n            // We want to hide the submit buttons every time it is opened.\n\n            this.modal.getFooter().find('[data-action=\"save\"]').on('click', this.submitForm.bind(this));\n            this.modal.getFooter().find(['data-action = cancel']).on('click', function(){\n\n              modal.setBody('');\n              modal.hide();\n\n              setTimeout(function () {\n                  modal.destroy();\n              },1000)\n\n             });\n\n            this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                modal.hide();\n                setTimeout(function(){\n                    modal.destroy();\n                }, 1000);\n                 //modal.destroy();\n            });\n            this.modal.getRoot().on('submit', 'form', function(form) {\n                self.submitformAjax(form, self.args);\n            });\n            this.modal.show();\n            return this.modal;\n        }.bind(this));\n\n    };\n\n    formAjax.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        // Get the content of the modal.\n        this.args.jsonformdata = JSON.stringify(formdata);\n        return Fragment.loadFragment(this.args.component, this.args.callback, this.contextid, this.args);\n       // return Fragment.loadFragment('local_manager', 'custom_class_form', this.contextid, this.args);\n    };\n\n    formAjax.prototype.getFooter=function () {\n\n        //var classname=this.args.classname;\n\n        if (this.args.id) {\n\n           // $footer='<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">Update ' + this.args.classname + ' Class</button>'\n\n           $footer='<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">Update Class</button>'\n\n        }else{\n\n            $footer='<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">Create Class</button>'\n        }\n\n        $footer += '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">Cancel</button>'\n        return $footer;\n    };\n\n\n   formAjax.prototype.getcontentFooter=function(){\n\n      $footer = '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">Cancel</button>'\n      return $footer;\n\n   };\n\n    formAjax.prototype.handleFormSubmissionResponse = function() {\n\n    // We could trigger an event instead.\n    // Yuk.\n    Y.use('moodle-core-formchangechecker', function() {\n        M.core_formchangechecker.reset_form_dirty_state();\n    });\n\n          this.modal.hide();\n          window.location.reload();\n          window.location.href = window.location.href;\n\n    };\n\n   //  /**\n   //   * @method handleFormSubmissionFailure\n   //   * @private\n   //   * @return {Promise}\n   //   */\n    formAjax.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n\n     formAjax.prototype.submitformAjax = function(e, args) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n        var self = this;\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n       // var methodname = args.plugintype + '_' + args.pluginname + '_submit_create_class_form';\n        var params = {};\n        params.contextid = this.contextid;\n        params.id = args.id\n        params.jsonformdata = JSON.stringify(formData);\n\n\n     \n        var promise = Ajax.call([{\n            methodname: 'local_manager_submit_register',\n            args: params\n        }]);\n        promise[0].done(function(resp){\n                self.args.id = resp.id;\n                self.args.contextid = resp.contextid;\n                self.handleFormSubmissionResponse(self.args);\n                //self.successmessage();\n                window.location.reload();\n                window.location.href = window.location.href;\n\n\n        }).fail(function(){\n            self.handleFormSubmissionFailure(formData);\n        });\n\n    };\n\n    formAjax.prototype.submitForm = function(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n     return  {\n        init: function(args) {\n           return new formAjax(args);\n        },\n        // Delete function\n        deleteConfirm: function(args){\n\n            return Str.get_strings([{\n                key: 'confirm',\n                component: 'local_manager',\n            },\n            {\n                key: 'deleteconfirm1',\n                component: 'local_manager',\n                param : args\n            },\n            {\n                key: 'delete'\n            }]).then(function(s) {\n                ModalFactory.create({\n\n                    title: s[0],\n                    type: ModalFactory.types.DEFAULT,\n                    body: s[1],\n                    footer: '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">Yes! Delete</button>&nbsp;' +\n            '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">No</button>'\n                }).done(function(modal) {\n                    this.modal = modal;\n\n                    modal.getRoot().find('[data-action=\"save\"]').on('click', function() {\n                        args.confirm = true;\n                        var promise = Ajax.call([{\n                            methodname: 'local_manager_' + args.action,\n                            args: {\n                                id: args.id,\n                            },\n                        }]);\n                        promise[0].done(function() {\n                            window.location.reload();\n                            window.location.href = window.location.href;\n                       }).fail(function(ex) {\n                            // do something with the exception\n                             console.log(ex);\n                        });\n                    }.bind(this));\n                    modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.setBody('');\n                        modal.hide();\n                    });\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n        // Hide function\n        hideConfirm: function(args){\n            return Str.get_strings([{\n                key: 'hideconfirmheader',\n                component: 'local_manager',\n            },\n            {\n                key: 'hideconfirm',\n                component: 'local_manager',\n                param : args\n            },\n            {\n                key: 'hide'\n            }]).then(function(s) {\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.DEFAULT,\n                    body: s[1],\n                    footer: '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">Yes! Hide</button>&nbsp;' +\n            '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">No</button>'\n                }).done(function(modal) {\n                    this.modal = modal;\n\n                    modal.getRoot().find('[data-action=\"save\"]').on('click', function() {\n                        args.confirm = true;\n                        var promise = Ajax.call([{\n                            methodname: 'local_manager_' + args.action,\n                            args: {\n                                // contextid: args.contextid,\n                                id: args.id,\n                                // classname: args.classname,\n                            },\n                        }]);\n                        promise[0].done(function() {\n                            window.location.reload();\n                            window.location.href = window.location.href;\n                        }).fail(function(ex) {\n                            // do something with the exception\n                             console.log(ex);\n                        });\n                    }.bind(this));\n                    modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.setBody('');\n                        modal.hide();\n                    });\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n        // Unhide function\n        unHideConfirm: function(args){\n            return Str.get_strings([{\n                key: 'unhideconfirmheader',\n                component: 'local_manager',\n            },\n            {\n                key: 'unhideconfirm',\n                component: 'local_manager',\n                param : args\n            },\n            {\n                key: 'hide'\n            }]).then(function(s) {\n                ModalFactory.create({\n                    title: s[0],\n                    type: ModalFactory.types.DEFAULT,\n                    body: s[1],\n                    footer: '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">Yes! UnHide</button>&nbsp;' +\n            '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">No</button>'\n                }).done(function(modal) {\n                    this.modal = modal;\n\n                    modal.getRoot().find('[data-action=\"save\"]').on('click', function() {\n                        args.confirm = true;\n                        var promise = Ajax.call([{\n                            methodname: 'local_manager_' + args.action,\n                            args: {\n                                // contextid: args.contextid,\n                                id: args.id,\n                                // classname: args.classname,\n                            },\n                        }]);\n                        promise[0].done(function() {\n                            window.location.reload();\n                            window.location.href = window.location.href;\n                        }).fail(function(ex) {\n                            // do something with the exception\n                             console.log(ex);\n                        });\n                    }.bind(this));\n                    modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                        modal.setBody('');\n                        modal.hide();\n                    });\n                    modal.show();\n                }.bind(this));\n            }.bind(this));\n        },\n\n       load:function () {\n\n\n       }\n\n    };\n\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","Templates","Notification","formAjax","args","contextid","this","init","prototype","modal","self","id","head","get_string","then","title","create","type","types","DEFAULT","body","getBody","footer","getFooter","bind","setLarge","getRoot","on","hidden","setTimeout","destroy","setBody","find","submitForm","hide","form","submitformAjax","show","formdata","jsonformdata","JSON","stringify","loadFragment","component","callback","$footer","getcontentFooter","handleFormSubmissionResponse","use","M","core_formchangechecker","reset_form_dirty_state","window","location","reload","href","handleFormSubmissionFailure","data","e","preventDefault","formData","serialize","params","call","methodname","done","resp","fail","submit","deleteConfirm","get_strings","key","param","s","confirm","action","ex","console","log","hideConfirm","unHideConfirm","load"],"mappings":"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"}