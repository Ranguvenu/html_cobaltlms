{"version":3,"file":"dataTables.responsive.min.js","sources":["../src/dataTables.responsive.js"],"sourcesContent":["/*! Responsive 2.2.1-dev\n * 2014-2017 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     Responsive\n * @description Responsive tables plug-in for DataTables\n * @version     2.2.1-dev\n * @file        dataTables.responsive.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2014-2017 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n /*globals module,jQuery*/\n(function( factory ){\n    if ( typeof define === 'function' && define.amd ) {\n        // AMD\n        define( ['jQuery', 'local_program/jquery.dataTables'], function ( $ ) {\n            return factory( $, window, document );\n        } );\n    }\n    else if ( typeof exports === 'object' ) {\n        // CommonJS\n        module.exports = function (root, $) {\n            if ( ! root ) {\n                root = window;\n            }\n\n            if ( ! $ || ! $.fn.dataTable ) {\n                $ = require('datatables.net')(root, $).$;\n            }\n\n            return factory( $, root, root.document );\n        };\n    }\n    else {\n        // Browser\n        factory( jQuery, window, document );\n    }\n}(function( $, window, document, undefined ) {\n'use strict';\nvar DataTable = $.fn.dataTable;\n\n\n/**\n * Responsive is a plug-in for the DataTables library that makes use of\n * DataTables' ability to change the visibility of columns, changing the\n * visibility of columns so the displayed columns fit into the table container.\n * The end result is that complex tables will be dynamically adjusted to fit\n * into the viewport, be it on a desktop, tablet or mobile browser.\n *\n * Responsive for DataTables has two modes of operation, which can used\n * individually or combined:\n *\n * * Class name based control - columns assigned class names that match the\n *   breakpoint logic can be shown / hidden as required for each breakpoint.\n * * Automatic control - columns are automatically hidden when there is no\n *   room left to display them. Columns removed from the right.\n *\n * In additional to column visibility control, Responsive also has built into\n * options to use DataTables' child row display to show / hide the information\n * from the table that has been hidden. There are also two modes of operation\n * for this child row display:\n *\n * * Inline - when the control element that the user can use to show / hide\n *   child rows is displayed inside the first column of the table.\n * * Column - where a whole column is dedicated to be the show / hide control.\n *\n * Initialisation of Responsive is performed by:\n *\n * * Adding the class `responsive` or `dt-responsive` to the table. In this case\n *   Responsive will automatically be initialised with the default configuration\n *   options when the DataTable is created.\n * * Using the `responsive` option in the DataTables configuration options. This\n *   can also be used to specify the configuration options, or simply set to\n *   `true` to use the defaults.\n *\n *  @class\n *  @param {object} settings DataTables settings object for the host table\n *  @param {object} [opts] Configuration options\n *  @requires jQuery 1.7+\n *  @requires DataTables 1.10.3+\n *\n *  @example\n *      $('#example').DataTable( {\n *        responsive: true\n *      } );\n *    } );\n */\nvar Responsive = function ( settings, opts ) {\n    // Sanity check that we are using DataTables 1.10 or newer\n    if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.3' ) ) {\n        throw 'DataTables Responsive requires DataTables 1.10.3 or newer';\n    }\n\n    this.s = {\n        dt: new DataTable.Api( settings ),\n        columns: [],\n        current: []\n    };\n\n    // Check if responsive has already been initialised on this table\n    if ( this.s.dt.settings()[0].responsive ) {\n        return;\n    }\n\n    // details is an object, but for simplicity the user can give it as a string\n    // or a boolean\n    if ( opts && typeof opts.details === 'string' ) {\n        opts.details = { type: opts.details };\n    }\n    else if ( opts && opts.details === false ) {\n        opts.details = { type: false };\n    }\n    else if ( opts && opts.details === true ) {\n        opts.details = { type: 'inline' };\n    }\n\n    this.c = $.extend( true, {}, Responsive.defaults, DataTable.defaults.responsive, opts );\n    settings.responsive = this;\n    this._constructor();\n};\n\n$.extend( Responsive.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Constructor\n     */\n\n    /**\n     * Initialise the Responsive instance\n     *\n     * @private\n     */\n    _constructor: function ()\n    {\n        var that = this;\n        var dt = this.s.dt;\n        var dtPrivateSettings = dt.settings()[0];\n        var oldWindowWidth = $(window).width();\n\n        dt.settings()[0]._responsive = this;\n\n        // Use DataTables' throttle function to avoid processor thrashing on\n        // resize\n        $(window).on( 'resize.dtr orientationchange.dtr', DataTable.util.throttle( function () {\n            // iOS has a bug whereby resize can fire when only scrolling\n            // See: http://stackoverflow.com/questions/8898412\n            var width = $(window).width();\n\n            if ( width !== oldWindowWidth ) {\n                that._resize();\n                oldWindowWidth = width;\n            }\n        } ) );\n\n        // DataTables doesn't currently trigger an event when a row is added, so\n        // we need to hook into its private API to enforce the hidden rows when\n        // new data is added\n        dtPrivateSettings.oApi._fnCallbackReg( dtPrivateSettings, 'aoRowCreatedCallback', function (tr) {\n            if ( $.inArray( false, that.s.current ) !== -1 ) {\n                $('>td, >th', tr).each( function ( i ) {\n                    var idx = dt.column.index( 'toData', i );\n\n                    if ( that.s.current[idx] === false ) {\n                        $(this).css('display', 'none');\n                    }\n                } );\n            }\n        } );\n\n        // Destroy event handler\n        dt.on( 'destroy.dtr', function () {\n            dt.off( '.dtr' );\n            $( dt.table().body() ).off( '.dtr' );\n            $(window).off( 'resize.dtr orientationchange.dtr' );\n\n            // Restore the columns that we've hidden\n            $.each( that.s.current, function ( i, val ) {\n                if ( val === false ) {\n                    that._setColumnVis( i, true );\n                }\n            } );\n        } );\n\n        // Reorder the breakpoints array here in case they have been added out\n        // of order\n        this.c.breakpoints.sort( function (a, b) {\n            return a.width < b.width ? 1 :\n                a.width > b.width ? -1 : 0;\n        } );\n\n        this._classLogic();\n        this._resizeAuto();\n\n        // Details handler\n        var details = this.c.details;\n\n        if ( details.type !== false ) {\n            that._detailsInit();\n\n            // DataTables will trigger this event on every column it shows and\n            // hides individually\n            dt.on( 'column-visibility.dtr', function () {\n                that._classLogic();\n                that._resizeAuto();\n                that._resize();\n            } );\n\n            // Redraw the details box on each draw which will happen if the data\n            // has changed. This is used until DataTables implements a native\n            // `updated` event for rows\n            dt.on( 'draw.dtr', function () {\n                that._redrawChildren();\n            } );\n\n            $(dt.table().node()).addClass( 'dtr-'+details.type );\n        }\n\n        dt.on( 'column-reorder.dtr', function () {\n            that._classLogic();\n            that._resizeAuto();\n            that._resize();\n        } );\n\n        // Change in column sizes means we need to calc\n        dt.on( 'column-sizing.dtr', function () {\n            that._resizeAuto();\n            that._resize();\n        });\n\n        // On Ajax reload we want to reopen any child rows which are displayed\n        // by responsive\n        dt.on( 'preXhr.dtr', function () {\n            var rowIds = [];\n            dt.rows().every( function () {\n                if ( this.child.isShown() ) {\n                    rowIds.push( this.id(true) );\n                }\n            } );\n\n            dt.one( 'draw.dtr', function () {\n                dt.rows( rowIds ).every( function () {\n                    that._detailsDisplay( this, false );\n                } );\n            } );\n        });\n\n        dt.on( 'init.dtr', function () {\n            that._resizeAuto();\n            that._resize();\n\n            // If columns were hidden, then DataTables needs to adjust the\n            // column sizing\n            if ( $.inArray( false, that.s.current ) ) {\n                dt.columns.adjust();\n            }\n        } );\n\n        // First pass - draw the table for the current viewport size\n        this._resize();\n    },\n\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods\n     */\n\n    /**\n     * Calculate the visibility for the columns in a table for a given\n     * breakpoint. The result is pre-determined based on the class logic if\n     * class names are used to control all columns, but the width of the table\n     * is also used if there are columns which are to be automatically shown\n     * and hidden.\n     *\n     * @param  {string} breakpoint Breakpoint name to use for the calculation\n     * @return {array} Array of boolean values initiating the visibility of each\n     *   column.\n     *  @private\n     */\n    _columnsVisiblity: function ( breakpoint )\n    {\n        var dt = this.s.dt;\n        var columns = this.s.columns;\n        var i, ien;\n\n        // Create an array that defines the column ordering based first on the\n        // column's priority, and secondly the column index. This allows the\n        // columns to be removed from the right if the priority matches\n        var order = columns\n            .map( function ( col, idx ) {\n                return {\n                    columnIdx: idx,\n                    priority: col.priority\n                };\n            } )\n            .sort( function ( a, b ) {\n                if ( a.priority !== b.priority ) {\n                    return a.priority - b.priority;\n                }\n                return a.columnIdx - b.columnIdx;\n            } );\n\n        // Class logic - determine which columns are in this breakpoint based\n        // on the classes. If no class control (i.e. `auto`) then `-` is used\n        // to indicate this to the rest of the function\n        var display = $.map( columns, function ( col ) {\n            return col.auto && col.minWidth === null ?\n                false :\n                col.auto === true ?\n                    '-' :\n                    $.inArray( breakpoint, col.includeIn ) !== -1;\n        } );\n\n        // Auto column control - first pass: how much width is taken by the\n        // ones that must be included from the non-auto columns\n        var requiredWidth = 0;\n        for ( i=0, ien=display.length ; i<ien ; i++ ) {\n            if ( display[i] === true ) {\n                requiredWidth += columns[i].minWidth;\n            }\n        }\n\n        // Second pass, use up any remaining width for other columns. For\n        // scrolling tables we need to subtract the width of the scrollbar. It\n        // may not be requires which makes this sub-optimal, but it would\n        // require another full redraw to make complete use of those extra few\n        // pixels\n        var scrolling = dt.settings()[0].oScroll;\n        var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;\n        var widthAvailable = dt.table().container().offsetWidth - bar;\n        var usedWidth = widthAvailable - requiredWidth;\n\n        // Control column needs to always be included. This makes it sub-\n        // optimal in terms of using the available with, but to stop layout\n        // thrashing or overflow. Also we need to account for the control column\n        // width first so we know how much width is available for the other\n        // columns, since the control column might not be the first one shown\n        for ( i=0, ien=display.length ; i<ien ; i++ ) {\n            if ( columns[i].control ) {\n                usedWidth -= columns[i].minWidth;\n            }\n        }\n\n        // Allow columns to be shown (counting by priority and then right to\n        // left) until we run out of room\n        var empty = false;\n        for ( i=0, ien=order.length ; i<ien ; i++ ) {\n            var colIdx = order[i].columnIdx;\n\n            if ( display[colIdx] === '-' && ! columns[colIdx].control && columns[colIdx].minWidth ) {\n                // Once we've found a column that won't fit we don't let any\n                // others display either, or columns might disappear in the\n                // middle of the table\n                if ( empty || usedWidth - columns[colIdx].minWidth < 0 ) {\n                    empty = true;\n                    display[colIdx] = false;\n                }\n                else {\n                    display[colIdx] = true;\n                }\n\n                usedWidth -= columns[colIdx].minWidth;\n            }\n        }\n\n        // Determine if the 'control' column should be shown (if there is one).\n        // This is the case when there is a hidden column (that is not the\n        // control column). The two loops look inefficient here, but they are\n        // trivial and will fly through. We need to know the outcome from the\n        // first , before the action in the second can be taken\n        var showControl = false;\n\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\n            if ( ! columns[i].control && ! columns[i].never && ! display[i] ) {\n                showControl = true;\n                break;\n            }\n        }\n\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\n            if ( columns[i].control ) {\n                display[i] = showControl;\n            }\n        }\n\n        // Finally we need to make sure that there is at least one column that\n        // is visible\n        if ( $.inArray( true, display ) === -1 ) {\n            display[0] = true;\n        }\n\n        return display;\n    },\n\n\n    /**\n     * Create the internal `columns` array with information about the columns\n     * for the table. This includes determining which breakpoints the column\n     * will appear in, based upon class names in the column, which makes up the\n     * vast majority of this method.\n     *\n     * @private\n     */\n    _classLogic: function ()\n    {\n        var that = this;\n        var breakpoints = this.c.breakpoints;\n        var dt = this.s.dt;\n        var columns = dt.columns().eq(0).map( function (i) {\n            var column = this.column(i);\n            var className = column.header().className;\n            var priority = dt.settings()[0].aoColumns[i].responsivePriority;\n\n            if ( priority === undefined ) {\n                var dataPriority = $(column.header()).data('priority');\n\n                priority = dataPriority !== undefined ?\n                    dataPriority * 1 :\n                    10000;\n            }\n\n            return {\n                className: className,\n                includeIn: [],\n                auto:      false,\n                control:   false,\n                never:     className.match(/\\bnever\\b/) ? true : false,\n                priority:  priority\n            };\n        } );\n\n        // Simply add a breakpoint to `includeIn` array, ensuring that there are\n        // no duplicates\n        var add = function ( colIdx, name ) {\n            var includeIn = columns[colIdx].includeIn;\n\n            if ( $.inArray( name, includeIn ) === -1 ) {\n                includeIn.push( name );\n            }\n        };\n\n        var column = function ( colIdx, name, operator, matched ) {\n            var size, i, ien;\n\n            if ( ! operator ) {\n                columns[colIdx].includeIn.push( name );\n            }\n            else if ( operator === 'max-' ) {\n                // Add this breakpoint and all smaller\n                size = that._find( name ).width;\n\n                for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {\n                    if ( breakpoints[i].width <= size ) {\n                        add( colIdx, breakpoints[i].name );\n                    }\n                }\n            }\n            else if ( operator === 'min-' ) {\n                // Add this breakpoint and all larger\n                size = that._find( name ).width;\n\n                for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {\n                    if ( breakpoints[i].width >= size ) {\n                        add( colIdx, breakpoints[i].name );\n                    }\n                }\n            }\n            else if ( operator === 'not-' ) {\n                // Add all but this breakpoint\n                for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {\n                    if ( breakpoints[i].name.indexOf( matched ) === -1 ) {\n                        add( colIdx, breakpoints[i].name );\n                    }\n                }\n            }\n        };\n\n        // Loop over each column and determine if it has a responsive control\n        // class\n        columns.each( function ( col, i ) {\n            var classNames = col.className.split(' ');\n            var hasClass = false;\n\n            // Split the class name up so multiple rules can be applied if needed\n            for ( var k=0, ken=classNames.length ; k<ken ; k++ ) {\n                var className = $.trim( classNames[k] );\n\n                if ( className === 'all' ) {\n                    // Include in all\n                    hasClass = true;\n                    col.includeIn = $.map( breakpoints, function (a) {\n                        return a.name;\n                    } );\n                    return;\n                }\n                else if ( className === 'none' || col.never ) {\n                    // Include in none (default) and no auto\n                    hasClass = true;\n                    return;\n                }\n                else if ( className === 'control' ) {\n                    // Special column that is only visible, when one of the other\n                    // columns is hidden. This is used for the details control\n                    hasClass = true;\n                    col.control = true;\n                    return;\n                }\n\n                $.each( breakpoints, function ( j, breakpoint ) {\n                    // Does this column have a class that matches this breakpoint?\n                    var className;\n                    var brokenPoint = breakpoint.name.split('-');\n                    var re = new RegExp( '(min\\\\-|max\\\\-|not\\\\-)?('+brokenPoint[0]+')(\\\\-[_a-zA-Z0-9])?' );\n                    var match = className.match( re );\n\n                    if ( match ) {\n                        // hasClass = true;\n\n                        if ( match[2] === brokenPoint[0] && match[3] === '-'+brokenPoint[1] ) {\n                            // Class name matches breakpoint name fully\n                            column( i, breakpoint.name, match[1], match[2]+match[3] );\n                        }\n                        else if ( match[2] === brokenPoint[0] && ! match[3] ) {\n                            // Class name matched primary breakpoint name with no qualifier\n                            column( i, breakpoint.name, match[1], match[2] );\n                        }\n                    }\n                } );\n            }\n\n            // If there was no control class, then automatic sizing is used\n            if ( ! hasClass ) {\n                col.auto = true;\n            }\n        } );\n\n        this.s.columns = columns;\n    },\n\n\n    /**\n     * Show the details for the child row\n     *\n     * @param  {DataTables.Api} row    API instance for the row\n     * @param  {boolean}        update Update flag\n     * @private\n     */\n    _detailsDisplay: function ( row, update )\n    {\n        var that = this;\n        var dt = this.s.dt;\n        var details = this.c.details;\n\n        if ( details && details.type !== false ) {\n            var res = details.display( row, update, function () {\n                return details.renderer(\n                    dt, row[0], that._detailsObj(row[0])\n                );\n            } );\n\n            if ( res === true || res === false ) {\n                $(dt.table().node()).triggerHandler( 'responsive-display.dt', [dt, row, res, update] );\n            }\n        }\n    },\n\n\n    /**\n     * Initialisation for the details handler\n     *\n     * @private\n     */\n    _detailsInit: function ()\n    {\n        var that    = this;\n        var dt      = this.s.dt;\n        var details = this.c.details;\n\n        // The inline type always uses the first child as the target\n        if ( details.type === 'inline' ) {\n            details.target = 'td:first-child, th:first-child';\n        }\n\n        // Keyboard accessibility\n        dt.on( 'draw.dtr', function () {\n            that._tabIndexes();\n        } );\n        that._tabIndexes(); // Initial draw has already happened\n\n        $( dt.table().body() ).on( 'keyup.dtr', 'td, th', function (e) {\n            if ( e.keyCode === 13 && $(this).data('dtr-keyboard') ) {\n                $(this).click();\n            }\n        } );\n\n        // type.target can be a string jQuery selector or a column index\n        var target   = details.target;\n        var selector = typeof target === 'string' ? target : 'td, th';\n\n        // Click handler to show / hide the details rows when they are available\n        $( dt.table().body() )\n            .on( 'click.dtr mousedown.dtr mouseup.dtr', selector, function (e) {\n                // If the table is not collapsed (i.e. there is no hidden columns)\n                // then take no action\n                if ( ! $(dt.table().node()).hasClass('collapsed' ) ) {\n                    return;\n                }\n\n                // Check that the row is actually a DataTable's controlled node\n                if ( $.inArray( $(this).closest('tr').get(0), dt.rows().nodes().toArray() ) === -1 ) {\n                    return;\n                }\n\n                // For column index, we determine if we should act or not in the\n                // handler - otherwise it is already okay\n                if ( typeof target === 'number' ) {\n                    var targetIdx = target < 0 ?\n                        dt.columns().eq(0).length + target :\n                        target;\n\n                    if ( dt.cell( this ).index().column !== targetIdx ) {\n                        return;\n                    }\n                }\n\n                // $().closest() includes itself in its check\n                var row = dt.row( $(this).closest('tr') );\n\n                // Check event type to do an action\n                if ( e.type === 'click' ) {\n                    // The renderer is given as a function so the caller can execute it\n                    // only when they need (i.e. if hiding there is no point is running\n                    // the renderer)\n                    that._detailsDisplay( row, false );\n                }\n                else if ( e.type === 'mousedown' ) {\n                    // For mouse users, prevent the focus ring from showing\n                    $(this).css('outline', 'none');\n                }\n                else if ( e.type === 'mouseup' ) {\n                    // And then re-allow at the end of the click\n                    $(this).blur().css('outline', '');\n                }\n            } );\n    },\n\n\n    /**\n     * Get the details to pass to a renderer for a row\n     * @param  {int} rowIdx Row index\n     * @private\n     */\n    _detailsObj: function ( rowIdx )\n    {\n        var that = this;\n        var dt = this.s.dt;\n\n        return $.map( this.s.columns, function( col, i ) {\n            // Never and control columns should not be passed to the renderer\n            if ( col.never || col.control ) {\n                return;\n            }\n\n            return {\n                title:       dt.settings()[0].aoColumns[i].sTitle,\n                data:        dt.cell( rowIdx, i ).render( that.c.orthogonal ),\n                hidden:      dt.column( i ).visible() && !that.s.current[i],\n                columnIndex: i,\n                rowIndex:    rowIdx\n            };\n        } );\n    },\n\n\n    /**\n     * Find a breakpoint object from a name\n     *\n     * @param  {string} name Breakpoint name to find\n     * @return {object}      Breakpoint description object\n     * @private\n     */\n    _find: function ( name )\n    {\n        var breakpoints = this.c.breakpoints;\n\n        for ( var i=0, ien=breakpoints.length ; i<ien ; i++ ) {\n            if ( breakpoints[i].name === name ) {\n                return breakpoints[i];\n            }\n        }\n    },\n\n\n    /**\n     * Re-create the contents of the child rows as the display has changed in\n     * some way.\n     *\n     * @private\n     */\n    _redrawChildren: function ()\n    {\n        var that = this;\n        var dt = this.s.dt;\n\n        dt.rows( {page: 'current'} ).iterator( 'row', function ( settings, idx ) {\n            that._detailsDisplay( dt.row( idx ), true );\n        } );\n    },\n\n\n    /**\n     * Alter the table display for a resized viewport. This involves first\n     * determining what breakpoint the window currently is in, getting the\n     * column visibilities to apply and then setting them.\n     *\n     * @private\n     */\n    _resize: function ()\n    {\n        var that = this;\n        var dt = this.s.dt;\n        var width = $(window).width();\n        var breakpoints = this.c.breakpoints;\n        var breakpoint = breakpoints[0].name;\n        var columns = this.s.columns;\n        var i, ien;\n        var oldVis = this.s.current.slice();\n\n        // Determine what breakpoint we are currently at\n        for ( i=breakpoints.length-1 ; i>=0 ; i-- ) {\n            if ( width <= breakpoints[i].width ) {\n                breakpoint = breakpoints[i].name;\n                break;\n            }\n        }\n\n        // Show the columns for that break point\n        var columnsVis = this._columnsVisiblity( breakpoint );\n        this.s.current = columnsVis;\n\n        // Set the class before the column visibility is changed so event\n        // listeners know what the state is. Need to determine if there are\n        // any columns that are not visible but can be shown\n        var collapsedClass = false;\n        for ( i=0, ien=columns.length ; i<ien ; i++ ) {\n            if ( columnsVis[i] === false && ! columns[i].never && ! columns[i].control ) {\n                collapsedClass = true;\n                break;\n            }\n        }\n\n        $( dt.table().node() ).toggleClass( 'collapsed', collapsedClass );\n\n        var changed = false;\n        var visible = 0;\n\n        dt.columns().eq(0).each( function ( colIdx, i ) {\n            if ( columnsVis[i] === true ) {\n                visible++;\n            }\n\n            if ( columnsVis[i] !== oldVis[i] ) {\n                changed = true;\n                that._setColumnVis( colIdx, columnsVis[i] );\n            }\n        } );\n\n        if ( changed ) {\n            this._redrawChildren();\n\n            // Inform listeners of the change\n            $(dt.table().node()).trigger( 'responsive-resize.dt', [dt, this.s.current] );\n\n            // If no records, update the \"No records\" display element\n            if ( dt.page.info().recordsDisplay === 0 ) {\n                $('td', dt.table().body()).eq(0).attr('colspan', visible);\n            }\n        }\n    },\n\n\n    /**\n     * Determine the width of each column in the table so the auto column hiding\n     * has that information to work with. This method is never going to be 100%\n     * perfect since column widths can change slightly per page, but without\n     * seriously compromising performance this is quite effective.\n     *\n     * @private\n     */\n    _resizeAuto: function ()\n    {\n        var dt = this.s.dt;\n        var columns = this.s.columns;\n\n        // Are we allowed to do auto sizing?\n        if ( ! this.c.auto ) {\n            return;\n        }\n\n        // Are there any columns that actually need auto-sizing, or do they all\n        // have classes defined\n        if ( $.inArray( true, $.map( columns, function (c) { return c.auto; } ) ) === -1 ) {\n            return;\n        }\n\n        // Need to restore all children. They will be reinstated by a re-render\n        if ( ! $.isEmptyObject( _childNodeStore ) ) {\n            $.each( _childNodeStore, function ( key ) {\n                var idx = key.split('-');\n\n                _childNodesRestore( dt, idx[0]*1, idx[1]*1 );\n            } );\n        }\n\n        // Clone the table with the current data in it\n        var clonedTable  = dt.table().node().cloneNode( false );\n        var clonedHeader = $( dt.table().header().cloneNode( false ) ).appendTo( clonedTable );\n        var clonedBody   = $( dt.table().body() ).clone( false, false )\n        .empty().appendTo( clonedTable ); // use jQuery because of IE8\n\n        // Header\n        var headerCells = dt.columns()\n            .header()\n            .filter( function (idx) {\n                return dt.column(idx).visible();\n            } )\n            .to$()\n            .clone( false )\n            .css( 'display', 'table-cell' );\n\n        // Body rows - we don't need to take account of DataTables' column\n        // visibility since we implement our own here (hence the `display` set)\n        $(clonedBody)\n            .append( $(dt.rows( { page: 'current' } ).nodes()).clone( false ) )\n            .find( 'th, td' ).css( 'display', '' );\n\n        // Footer\n        var footer = dt.table().footer();\n        if ( footer ) {\n            var clonedFooter = $( footer.cloneNode( false ) ).appendTo( clonedTable );\n            var footerCells = dt.columns()\n                .footer()\n                .filter( function (idx) {\n                    return dt.column(idx).visible();\n                } )\n                .to$()\n                .clone( false )\n                .css( 'display', 'table-cell' );\n\n            $('<tr/>')\n                .append( footerCells )\n                .appendTo( clonedFooter );\n        }\n\n        $('<tr/>')\n            .append( headerCells )\n            .appendTo( clonedHeader );\n\n        // In the inline case extra padding is applied to the first column to\n        // give space for the show / hide icon. We need to use this in the\n        // calculation\n        if ( this.c.details.type === 'inline' ) {\n            $(clonedTable).addClass( 'dtr-inline collapsed' );\n        }\n\n        // It is unsafe to insert elements with the same name into the DOM\n        // multiple times. For example, cloning and inserting a checked radio\n        // clears the chcecked state of the original radio.\n        $( clonedTable ).find( '[name]' ).removeAttr( 'name' );\n\n        var inserted = $('<div/>')\n            .css( {\n                width: 1,\n                height: 1,\n                overflow: 'hidden',\n                clear: 'both'\n            } )\n            .append( clonedTable );\n\n        inserted.insertBefore( dt.table().node() );\n\n        // The cloned header now contains the smallest that each column can be\n        headerCells.each( function (i) {\n            var idx = dt.column.index( 'fromVisible', i );\n            columns[idx].minWidth =  this.offsetWidth || 0;\n        } );\n\n        inserted.remove();\n    },\n\n    /**\n     * Set a column's visibility.\n     *\n     * We don't use DataTables' column visibility controls in order to ensure\n     * that column visibility can Responsive can no-exist. Since only IE8+ is\n     * supported (and all evergreen browsers of course) the control of the\n     * display attribute works well.\n     *\n     * @param {integer} col      Column index\n     * @param {boolean} showHide Show or hide (true or false)\n     * @private\n     */\n    _setColumnVis: function ( col, showHide )\n    {\n        var dt = this.s.dt;\n        var display = showHide ? '' : 'none'; // empty string will remove the attr\n\n        $( dt.column( col ).header() ).css( 'display', display );\n        $( dt.column( col ).footer() ).css( 'display', display );\n        dt.column( col ).nodes().to$().css( 'display', display );\n\n        // If the are child nodes stored, we might need to reinsert them\n        if ( ! $.isEmptyObject( _childNodeStore ) ) {\n            dt.cells( null, col ).indexes().each( function (idx) {\n                _childNodesRestore( dt, idx.row, idx.column );\n            } );\n        }\n    },\n\n\n    /**\n     * Update the cell tab indexes for keyboard accessibility. This is called on\n     * every table draw - that is potentially inefficient, but also the least\n     * complex option given that column visibility can change on the fly. Its a\n     * shame user-focus was removed from CSS 3 UI, as it would have solved this\n     * issue with a single CSS statement.\n     *\n     * @private\n     */\n    _tabIndexes: function ()\n    {\n        var dt = this.s.dt;\n        var cells = dt.cells( { page: 'current' } ).nodes().to$();\n        var ctx = dt.settings()[0];\n        var target = this.c.details.target;\n\n        cells.filter( '[data-dtr-keyboard]' ).removeData( '[data-dtr-keyboard]' );\n\n        var selector = typeof target === 'number' ?\n            ':eq('+target+')' :\n            target;\n\n        // This is a bit of a hack - we need to limit the selected nodes to just\n        // those of this table\n        if ( selector === 'td:first-child, th:first-child' ) {\n            selector = '>td:first-child, >th:first-child';\n        }\n\n        $( selector, dt.rows( { page: 'current' } ).nodes() )\n            .attr( 'tabIndex', ctx.iTabIndex )\n            .data( 'dtr-keyboard', 1 );\n    }\n} );\n\n\n/**\n * List of default breakpoints. Each item in the array is an object with two\n * properties:\n *\n * * `name` - the breakpoint name.\n * * `width` - the breakpoint width\n *\n * @name Responsive.breakpoints\n * @static\n */\nResponsive.breakpoints = [\n    { name: 'desktop',  width: Infinity },\n    { name: 'tablet-l', width: 1024 },\n    { name: 'tablet-p', width: 768 },\n    { name: 'mobile-l', width: 480 },\n    { name: 'mobile-p', width: 320 }\n];\n\n\n/**\n * Display methods - functions which define how the hidden data should be shown\n * in the table.\n *\n * @namespace\n * @name Responsive.defaults\n * @static\n */\nResponsive.display = {\n    childRow: function ( row, update, render ) {\n        if ( update ) {\n            if ( $(row.node()).hasClass('parent') ) {\n                row.child( render(), 'child' ).show();\n\n                return true;\n            }\n        }\n        else {\n            if ( ! row.child.isShown()  ) {\n                row.child( render(), 'child' ).show();\n                $( row.node() ).addClass( 'parent' );\n\n                return true;\n            }\n            else {\n                row.child( false );\n                $( row.node() ).removeClass( 'parent' );\n\n                return false;\n            }\n        }\n    },\n\n    childRowImmediate: function ( row, update, render ) {\n        if ( (! update && row.child.isShown()) || ! row.responsive.hasHidden() ) {\n            // User interaction and the row is show, or nothing to show\n            row.child( false );\n            $( row.node() ).removeClass( 'parent' );\n\n            return false;\n        }\n        else {\n            // Display\n            row.child( render(), 'child' ).show();\n            $( row.node() ).addClass( 'parent' );\n\n            return true;\n        }\n    },\n\n    // This is a wrapper so the modal options for Bootstrap and jQuery UI can\n    // have options passed into them. This specific one doesn't need to be a\n    // function but it is for consistency in the `modal` name\n    modal: function ( options ) {\n        return function ( row, update, render ) {\n            if ( ! update ) {\n                // Show a modal\n                var close = function () {\n                    modal.remove(); // will tidy events for us\n                    $(document).off( 'keypress.dtr' );\n                };\n\n                var modal = $('<div class=\"dtr-modal\"/>')\n                    .append( $('<div class=\"dtr-modal-display\"/>')\n                        .append( $('<div class=\"dtr-modal-content\"/>')\n                            .append( render() )\n                        )\n                        .append( $('<div class=\"dtr-modal-close\">&times;</div>' )\n                            .click( function () {\n                                close();\n                            } )\n                        )\n                    )\n                    .append( $('<div class=\"dtr-modal-background\"/>')\n                        .click( function () {\n                            close();\n                        } )\n                    )\n                    .appendTo( 'body' );\n\n                $(document).on( 'keyup.dtr', function (e) {\n                    if ( e.keyCode === 27 ) {\n                        e.stopPropagation();\n\n                        close();\n                    }\n                } );\n            }\n            else {\n                $('div.dtr-modal-content')\n                    .empty()\n                    .append( render() );\n            }\n\n            if ( options && options.header ) {\n                $('div.dtr-modal-content').prepend(\n                    '<h2>'+options.header( row )+'</h2>'\n                );\n            }\n        };\n    }\n};\n\n\nvar _childNodeStore = {};\n/**\n * @param {object} dt\n * @param {object} row\n * @param {object} col\n */\nfunction _childNodes( dt, row, col ) {\n    var name = row+'-'+col;\n\n    if ( _childNodeStore[name] ) {\n        return _childNodeStore[name];\n    }\n\n    // https://jsperf.com/childnodes-array-slice-vs-loop\n    var nodes = [];\n    var children = dt.cell( row, col ).node().childNodes;\n    for ( var i=0, ien=children.length ; i<ien ; i++ ) {\n        nodes.push( children[i] );\n    }\n\n    _childNodeStore[name] = nodes;\n\n    return nodes;\n}\n/**\n * @param {object} dt\n * @param {object} row\n * @param {object} col\n */\nfunction _childNodesRestore( dt, row, col ) {\n    var name = row+'-'+col;\n\n    if ( ! _childNodeStore[name] ) {\n        return;\n    }\n\n    var node = dt.cell( row, col ).node();\n    var store = _childNodeStore[name];\n    var parent = store[0].parentNode;\n    var parentChildren = parent.childNodes;\n    var a = [];\n\n    for ( var i=0, ien=parentChildren.length ; i<ien ; i++ ) {\n        a.push( parentChildren[i] );\n    }\n\n    for ( var j=0, jen=a.length ; j<jen ; j++ ) {\n        node.appendChild( a[j] );\n    }\n\n    _childNodeStore[name] = undefined;\n}\n\n\n/**\n * Display methods - functions which define how the hidden data should be shown\n * in the table.\n *\n * @namespace\n * @name Responsive.defaults\n * @static\n */\nResponsive.renderer = {\n    listHiddenNodes: function () {\n        return function ( api, rowIdx, columns ) {\n            var ul = $('<ul data-dtr-index=\"'+rowIdx+'\" class=\"dtr-details\"/>');\n            var found = false;\n\n            $.each( columns, function ( i, col ) {\n                if ( col.hidden ) {\n                    $(\n                        '<li data-dtr-index=\"'+col.columnIndex+'\" data-dt-row=\"'\n                        +col.rowIndex+'\" data-dt-column=\"'+col.columnIndex+'\">'+\n                            '<span class=\"dtr-title\">'+\n                                col.title+\n                            '</span> '+\n                        '</li>'\n                    )\n                        .append( $('<span class=\"dtr-data\"/>')\n                        .append( _childNodes( api, col.rowIndex, col.columnIndex ) ) )\n                        // api.cell( col.rowIndex, col.columnIndex ).node().childNodes ) )\n                        .appendTo( ul );\n\n                    found = true;\n                }\n            } );\n\n            return found ?\n                ul :\n                false;\n        };\n    },\n\n    listHidden: function () {\n        return function ( api, rowIdx, columns ) {\n            var data = $.map( columns, function ( col ) {\n                return col.hidden ?\n                    '<li data-dtr-index=\"'+col.columnIndex+'\" data-dt-row=\"'\n                    +col.rowIndex+'\" data-dt-column=\"'+col.columnIndex+'\">'+\n                        '<span class=\"dtr-title\">'+\n                            col.title+\n                        '</span> '+\n                        '<span class=\"dtr-data\">'+\n                            col.data+\n                        '</span>'+\n                    '</li>' :\n                    '';\n            } ).join('');\n\n            return data ?\n                $('<ul data-dtr-index=\"'+rowIdx+'\" class=\"dtr-details\"/>').append( data ) :\n                false;\n        };\n    },\n\n    tableAll: function ( options ) {\n        options = $.extend( {\n            tableClass: ''\n        }, options );\n\n        return function ( api, rowIdx, columns ) {\n            var data = $.map( columns, function ( col ) {\n                return '<tr data-dt-row=\"'+col.rowIndex+'\" data-dt-column=\"'+col.columnIndex+'\">'+\n                        '<td>'+col.title+':'+'</td> '+\n                        '<td>'+col.data+'</td>'+\n                    '</tr>';\n            } ).join('');\n\n            return $('<table class=\"'+options.tableClass+' dtr-details\" width=\"100%\"/>').append( data );\n        };\n    }\n};\n\n/**\n * Responsive default settings for initialisation\n *\n * @namespace\n * @name Responsive.defaults\n * @static\n */\nResponsive.defaults = {\n    /**\n     * List of breakpoints for the instance. Note that this means that each\n     * instance can have its own breakpoints. Additionally, the breakpoints\n     * cannot be changed once an instance has been creased.\n     *\n     * @type {Array}\n     * @default Takes the value of `Responsive.breakpoints`\n     */\n    breakpoints: Responsive.breakpoints,\n\n    /**\n     * Enable / disable auto hiding calculations. It can help to increase\n     * performance slightly if you disable this option, but all columns would\n     * need to have breakpoint classes assigned to them\n     *\n     * @type {Boolean}\n     * @default  `true`\n     */\n    auto: true,\n\n    /**\n     * Details control. If given as a string value, the `type` property of the\n     * default object is set to that value, and the defaults used for the rest\n     * of the object - this is for ease of implementation.\n     *\n     * The object consists of the following properties:\n     *\n     * * `display` - A function that is used to show and hide the hidden details\n     * * `renderer` - function that is called for display of the child row data.\n     *   The default function will show the data from the hidden columns\n     * * `target` - Used as the selector for what objects to attach the child\n     *   open / close to\n     * * `type` - `false` to disable the details display, `inline` or `column`\n     *   for the two control types\n     *\n     * @type {Object|string}\n     */\n    details: {\n        display: Responsive.display.childRow,\n\n        renderer: Responsive.renderer.listHidden(),\n\n        target: 0,\n\n        type: 'inline'\n    },\n\n    /**\n     * Orthogonal data request option. This is used to define the data type\n     * requested when Responsive gets the data to show in the child row.\n     *\n     * @type {String}\n     */\n    orthogonal: 'display'\n};\n\n\n/*\n * API\n */\nvar Api = $.fn.dataTable.Api;\n\n// Doesn't do anything - work around for a bug in DT... Not documented\nApi.register( 'responsive()', function () {\n    return this;\n} );\n\nApi.register( 'responsive.index()', function ( li ) {\n    li = $(li);\n\n    return {\n        column: li.data('dtr-index'),\n        row:    li.parent().data('dtr-index')\n    };\n} );\n\nApi.register( 'responsive.rebuild()', function () {\n    return this.iterator( 'table', function ( ctx ) {\n        if ( ctx._responsive ) {\n            ctx._responsive._classLogic();\n        }\n    } );\n} );\n\nApi.register( 'responsive.recalc()', function () {\n    return this.iterator( 'table', function ( ctx ) {\n        if ( ctx._responsive ) {\n            ctx._responsive._resizeAuto();\n            ctx._responsive._resize();\n        }\n    } );\n} );\n\nApi.register( 'responsive.hasHidden()', function () {\n    var ctx = this.context[0];\n\n    return ctx._responsive ?\n        $.inArray( false, ctx._responsive.s.current ) !== -1 :\n        false;\n} );\n\n\n/**\n * Version information\n *\n * @name Responsive.version\n * @static\n */\nResponsive.version = '2.2.1-dev';\n\n\n$.fn.dataTable.Responsive = Responsive;\n$.fn.DataTable.Responsive = Responsive;\n\n// Attach a listener to the document which listens for DataTables initialisation\n// events so we can automatically initialise\n$(document).on( 'preInit.dt.dtr', function (e, settings) {\n    if ( e.namespace !== 'dt' ) {\n        return;\n    }\n\n    if ( $(settings.nTable).hasClass( 'responsive' ) ||\n         $(settings.nTable).hasClass( 'dt-responsive' ) ||\n         settings.oInit.responsive ||\n         DataTable.defaults.responsive\n    ) {\n        var init = settings.oInit.responsive;\n\n        if ( init !== false ) {\n            new Responsive( settings, $.isPlainObject( init ) ? init : {}  );\n        }\n    }\n} );\n\n\nreturn Responsive;\n}));"],"names":["factory","$","window","document","undefined","DataTable","fn","dataTable","Responsive","settings","opts","versionCheck","s","dt","Api","columns","current","this","responsive","details","type","c","extend","defaults","_constructor","prototype","that","dtPrivateSettings","oldWindowWidth","width","_responsive","on","util","throttle","_resize","oApi","_fnCallbackReg","tr","inArray","each","i","idx","column","index","css","off","table","body","val","_setColumnVis","breakpoints","sort","a","b","_classLogic","_resizeAuto","_detailsInit","_redrawChildren","node","addClass","rowIds","rows","every","child","isShown","push","id","one","_detailsDisplay","adjust","_columnsVisiblity","breakpoint","ien","order","map","col","columnIdx","priority","display","auto","minWidth","includeIn","requiredWidth","length","scrolling","oScroll","bar","sY","sX","iBarWidth","usedWidth","container","offsetWidth","control","empty","colIdx","showControl","never","eq","className","header","aoColumns","responsivePriority","dataPriority","data","match","add","name","operator","matched","size","_find","indexOf","classNames","split","hasClass","k","ken","trim","j","brokenPoint","re","RegExp","row","update","res","renderer","_detailsObj","triggerHandler","target","_tabIndexes","e","keyCode","click","selector","closest","get","nodes","toArray","targetIdx","cell","blur","rowIdx","title","sTitle","render","orthogonal","hidden","visible","columnIndex","rowIndex","page","iterator","oldVis","slice","columnsVis","collapsedClass","toggleClass","changed","trigger","info","recordsDisplay","attr","isEmptyObject","_childNodeStore","key","_childNodesRestore","clonedTable","cloneNode","clonedHeader","appendTo","clonedBody","clone","headerCells","filter","to$","append","find","footer","clonedFooter","footerCells","removeAttr","inserted","height","overflow","clear","insertBefore","remove","showHide","cells","indexes","ctx","removeData","iTabIndex","Infinity","childRow","show","removeClass","childRowImmediate","hasHidden","modal","options","close","stopPropagation","prepend","parentChildren","parentNode","childNodes","jen","appendChild","listHiddenNodes","api","ul","found","children","_childNodes","listHidden","join","tableAll","tableClass","register","li","parent","context","version","namespace","nTable","oInit","init","isPlainObject","define","amd","exports","module","root","require","jQuery"],"mappings":"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"}