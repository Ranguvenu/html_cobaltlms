{"version":3,"file":"notifications.min.js","sources":["../src/notifications.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     local_notification/newnotification\n * @class      NewNotification\n * @package\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax) {\n    /**\n     * Constructor\n     *\n     * @param {object} args used to find triggers for the new group modal.\n     * @param {object} notificationid\n     * @param {object} instance\n     * @param {object} plugin\n     *\n     * Each call to init gets it's own instance of this class.\n     */\n    var NewNotification = function(args, notificationid, instance, plugin) {\n\n        this.contextid = args.context;\n        this.id = args.id;\n        this.notificationid = notificationid;\n        this.instance = instance;\n        this.plugin = plugin;\n        var self = this;\n        this.args = args;\n        self.init(args);\n    };\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewNotification.prototype.modal = null;\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewNotification.prototype.contextid = -1;\n    /**\n     * Initialise the class.\n     *\n     * @param {object} args used to find triggers for the new group modal.\n     * @private\n     * @return {Promise}\n     */\n    NewNotification.prototype.init = function(args) {\n        //var triggers = $(selector);\n        var self = this;\n        // Fetch the title string.\n            if (args.id) {\n                self.notificationid = args.id;\n            } else {\n                self.notificationid = 0;\n            }\n            if (self.notificationid) {\n                var head =  {key: 'update_notification', component: 'local_notifications'};\n            } else {\n               var head =  {key: 'create_notification', component: 'local_notifications'};\n            }\n            var strings = Str.get_strings([head\n            , {\n                key: 'save_continue',\n                component: 'local_users'\n            }, {\n                key: 'cancel',\n                component: 'moodle'\n            }, {\n                key: 'no',\n                component: 'moodle'\n            }]);\n            return strings.then(function(str) {\n                // Create the modal.\n                return ModalFactory.create({\n                type: ModalFactory.types.DEFAULT,\n                title: str[0],\n                body: this.getBody(),\n                footer: this.getFooter(str),\n                });\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n                this.modal.getRoot().addClass('openLMStransition local_notifications');\n\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\n                        modal.destroy();\n                }.bind(this));\n\n                this.modal.getFooter().find('[data-action=\"save\"]').on('click', this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n\n                this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\n                    modal.hide();\n                    setTimeout(function(){\n                        modal.destroy();\n                    }, 5000);\n                });\n\n                this.modal.getFooter().find('[data-action=\"skip\"]').on('click', function() {\n                    self.args.form_status = self.args.form_status + 1;\n                    var data = self.getBody();\n                    data.then(function(html) {\n                        if(html === false) {\n                            window.location.reload();\n                        }\n                    });\n                    modal.setBody(data);\n                });\n\n                this.modal.getRoot().on('submit', 'form', function(form) {\n                    self.submitFormAjax(form, self.args);\n                });\n                this.modal.show();\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\n\n                return this.modal;\n            }.bind(this));\n        };\n    /**\n     * @method getBody\n     * @private\n     * @param {object} formdata\n     * @return {Promise}\n     */\n    NewNotification.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = {};\n        }\n        this.args.jsonformdata = JSON.stringify(formdata);\n        return Fragment.loadFragment('local_notifications', 'new_notification_form', this.contextid, this.args);\n    };\n    /**\n     * @method getFooter\n     * @private\n     * @param {object} str\n     * @return {Promise}\n     */\n    NewNotification.prototype.getFooter = function(str) {\n        var $footer;\n        $footer = '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">'+str[1]+'</button>&nbsp;';\n        $footer += '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">'+str[2]+'</button>';\n        return $footer;\n    };\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @param {object} data\n     * @return {Promise}\n     */\n    NewNotification.prototype.handleFormSubmissionFailure = function(data) {\n        // Oh noes! Epic fail :(\n        // Ah wait - this is normal. We need to re-display the form with errors!\n        this.modal.setBody(this.getBody(data));\n    };\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     * @param {object} args\n     */\n    NewNotification.prototype.submitFormAjax = function(e ,args) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n        var self = this;\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n        var methodname = 'local_notifications_submit_create_notification_form';\n        var params = {};\n        params.contextid = this.contextid;\n        params.jsonformdata = JSON.stringify(formData);\n        params.form_status = args.form_status;\n\n        var promise = Ajax.call([{\n            methodname: methodname,\n            args: params\n        }]);\n\n         promise[0].done(function(resp){\n            if(resp.form_status !== -1 && resp.form_status !== false) {\n                self.args.form_status = resp.form_status;\n                self.args.id = resp.id;\n                self.handleFormSubmissionFailure();\n            } else {\n                self.modal.hide();\n                window.location.reload();\n            }\n            if(args.form_status > 0) {\n                $('[data-action=\"skip\"]').css('display', 'inline-block');\n            }\n        }).fail(function(){\n            self.handleFormSubmissionFailure(formData);\n        });\n    };\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewNotification.prototype.submitForm = function(e) {\n        e.preventDefault();\n        var self = this;\n        self.modal.getRoot().find('form').submit();\n    };\n    return /** @alias module:local_users/newuser */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {object} args\n         * @return {Promise}\n         */\n        init: function(args) {\n            return new NewNotification(args);\n        },\n        load: function(){\n\n        }\n    };\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","NewNotification","args","notificationid","instance","plugin","contextid","context","id","this","init","prototype","modal","self","head","key","component","get_strings","then","str","create","type","types","DEFAULT","title","body","getBody","footer","getFooter","bind","setLarge","getRoot","addClass","on","hidden","animate","destroy","find","submitForm","hide","setTimeout","form_status","data","html","window","location","reload","setBody","form","submitFormAjax","show","formdata","jsonformdata","JSON","stringify","loadFragment","$footer","handleFormSubmissionFailure","e","preventDefault","formData","serialize","params","call","methodname","done","resp","css","fail","submit","load"],"mappings":"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"}